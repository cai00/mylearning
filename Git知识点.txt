一、小结
现在总结一下今天学的两点内容：

初始化一个Git仓库，使用git init命令。

添加文件到Git仓库，分两步：

第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；

第二步，使用命令git commit，完成。

【初始化方法】
$ mkdir learngit
$ cd learngit
$ pwd
/Users/michael/learngit
pwd命令用于显示当前目录。在我的Mac上，这个仓库位于/Users/michael/learngit。

【总结】
1:执行git add readme.txt 指令时要保证在learngit库中存在此文件（自己在库中建一个）否则出现 fatal: pathspec 'readme.txt' did not match any files

2:执行git commit -m指令时前提要登陆，执行git config user.name "name" git config user.email "name@xxx.com"然后再执行git commit -m指令

总结：
1：创建文件目录 mkdir learngit
2：进入目录 cd learngit
3：初始化 git init
4：git config user.name "someone"
5：git config user.email "someone@someplace.com"
6：将文件加入到库中两中添加方法：一库中原来存在此文件，二自己创建一个文件然后执行git add “xxx”
7： git commit -m “说明”

二、命令
（1） cd 某个目录  		【进入相应的目录】
（2） pwd          		【查看当前仓库目录】
（3） git init     		【进入仓库目录】
（4） ls -ah       		【显示.git目录】
（5） git status   		【查看仓库当前状态】
（6） git diff     		【查看文件被修改了哪些内容】
（7） git add 某个文件 		【添加文件】
（8） git commit -m "说明"	【提交文件】

【版本回退命令】
（9） git log 			【查看提交历史记录】
（10）git --pretty=oneline	【查看记录commit id】
（11）git reset --hard HEAD   	【查看当前版本】（已经提交到marse分支回退的方法）
（11.1）git reset --hard HEAD~100【回退到100个版本】
（12）git reset --hard （3628164）commit id 【查看指定的某个版本】
（13）cat 某个文件		【查看文件的内容】
（14）git reflog  		【查看每一次命令记录】
小结
现在总结一下：

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

【工作区和暂存区】
前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：

第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；

第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。

因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。

你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。

【管理修改】
小结
现在，你又理解了Git是如何跟踪修改的，每次修改，如果不add到暂存区，那就不会加入到commit中。

【撤销修改】
小结

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令【git checkout -- file】。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，

第一步用命令【git reset HEAD file】，就回到了场景1（即工作区），第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。【git reset --hard HEAD~100】

【删除文件】
（1）rm 某个文件              			     【删除工作区的文件，不会删除版本库】
（2）git rm 某个文件，然后git commit -m "说明"       【删除版本库某个文件】
（3）git checkout -- 某个文件			     【用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”】
小结
命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，
你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。
【远程仓库】
（1）在GitBub网站中注册账号

（2）创建SSH Key。
在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，
可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：

【$ ssh-keygen -t rsa -C "youremail@example.com"】
【注：可用pwd命令查看用户目录】
你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。
如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，
不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

（3）登陆GitHub，打开“Account settings”，“SSH Keys”页面：

然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：点“Add Key”，你就应该看到已经添加的Key：

为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，
所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，
就可以在每台电脑上往GitHub推送了。
最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。

【添加远程库】
（1）首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：
（2）在Repository name填入mylearning，其他保持默认设置，点击“Create repository”按钮，
就成功地创建了一个新的Git仓库：
（3）目前，在GitHub上的这个mylearning仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。

现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：

【$ git remote add origin git@github.com:cai00/mylearning.git】

【注意：请千万注意，把上面的cai00替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的
，因为你的SSH Key公钥不在我的账户列表中。
添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。】

（4）下一步，就可以把本地库的所有内容推送到远程库上：
【$ git push -u origin master】
把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。

由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，
在以后的推送或者拉取时就可以简化命令。
推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：
从现在起，只要本地作了提交，就可以通过命令：

【$ git push origin master】
把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！


【创建分支】
小结

Git鼓励大量使用分支：

查看分支：【git branch】

创建分支：【git branch <name>】

切换分支：【git checkout <name>】

创建+切换分支：【git checkout -b <name>】

合并某分支到当前分支：【git merge <name>】

删除分支：【git branch -d <name>】


【解决冲突】
小结

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

用git log --graph命令可以看到分支合并图。

（1）$ git log --graph --pretty=oneline --abbrev-commit 【看到分支的合并情况】


【分支管理】
小结

Git分支十分强大，在团队开发中应该充分应用。

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

（1）准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：

【$ git merge --no-ff -m "merge with no-ff" dev】
因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。

前面讲到版本库的两条主要分支：Master和Develop。前者用于正式发布，后者用于日常开发。其实，常设分支只需要这两条就够了，不需要其他了。
但是，除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：
　　* 功能（feature）分支	【功能分支的名字，可以采用feature-*的形式命名。】
　　* 预发布（release）分支	【它的命名，可以采用release-*的形式。】
　　* 修补bug（fixbug）分支	【它的命名，可以采用fixbug-*的形式】
这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。

（2）预发布分支（release）
创建一个预发布分支：
【git checkout -b release-1.2 develop】

确认没有问题后，合并到master分支：
　【　git checkout master
　　git merge --no-ff release-1.2
　　# 对合并生成的新节点，做一个标签
　　git tag -a 1.2】

再合并到develop分支：
　　【git checkout develop
　　git merge --no-ff release-1.2】

最后，删除预发布分支：
　　【git branch -d release-1.2】

（3）修补bug分支
创建一个修补bug分支：
　　【git checkout -b fixbug-0.1 master】
修补结束后，合并到master分支：
　　【git checkout master
　　git merge --no-ff fixbug-0.1
　　git tag -a 0.1.1】
再合并到develop分支：
　【git checkout develop
　　git merge --no-ff fixbug-0.1】
最后，删除"修补bug分支"：
　　【git branch -d fixbug-0.1】


【bug分支修复】
小结

修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
（1）git stash list 【查看工作存储】
（2）工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：

一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；

另一种方式是用【git stash pop】，恢复的同时把stash内容也删了：
（3）
【$ git stash apply stash@{0}】 恢复到某个工作区


【feature分支】
小结

开发一个新feature，最好新建一个分支；

如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

【多人协作】
因此，多人协作的工作模式通常是这样：

首先，可以试图用git push origin branch-name推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

这就是多人协作的工作模式，一旦熟悉了，就非常简单。

小结

查看远程库信息，使用【git remote -v】

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用【git push origin branch-name】，如果推送失败，先用【git pull】抓取远程的新提交；

在本地创建和远程分支对应的分支，使用【git checkout -b branch-name origin/branch-name】，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用【git branch --set-upstream branch-name origin/branch-name】；

从远程抓取分支，使用【git pull】，如果有冲突，要先处理冲突。

【$ git clone git@github.com:cai00/mylearning.git】另一个目录下克隆


【创建标签】
小结

命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

git tag -a <tagname> -m "blablabla..."可以指定标签信息；

git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；

命令git tag可以查看所有标签。

【$ git log --pretty=oneline --abbrev-commit】 找到历史提交的commit id

【管理标签】
小结

命令【git push origin <tagname>】可以推送一个本地标签；

命令【git push origin --tags】可以推送全部未推送过的本地标签；

命令【git tag -d <tagname>】可以删除一个本地标签；

命令g【it push origin :refs/tags/<tagname>】可以删除一个远程标签。

【配置别名】
（1）【$ git config --global alias.st status】 st就表示status
（2）当然还有别的命令可以简写，很多人都用co表示checkout，ci表示commit，br表示branch：

	【$ git config --global alias.co checkout】
	【$ git config --global alias.ci commit】
	【$ git config --global alias.br branch】

（3）【$ git config --global alias.unstage 'reset HEAD'】 在撤销修改一节中，我们知道，命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名：

（4）【$ git config --global alias.last 'log -1'】 配置一个git last，让其显示最后一次提交信息：

（5）甚至还有人丧心病狂地把lg配置成了：

【git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"】


（6）【$ cat .git/config 】每个仓库的Git配置文件都放在.git/config文件中
（7）【$ cat .gitconfig】 当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中
